// Check [b]if[/b] resizing is needed based on occupancy factor\nfloat occupancy_factor = [b]([/b]float[b])[/b]size / [b]([/b]float[b])[/b]bucket_count;\n[b]if[/b] [b]([/b]occupancy_factor < 0.25 [b]and[/b] bucket_count > 1[b])[/b] [b]{[/b]\n    resize[b]([/b]0.5[b])[/b]; // Slice hashtable in hallf [b]([/b]autsch[b])[/b]\n[b]}[/b]\n\n// Berechne den Hash und bestimme den Bucket-Index\nsize_t hash = hashfkt[b]([/b]x[b])[/b];\n[b]int[/b] bucket_index = hash % num_buckets;\n\n// Remove the hash-key pair from the appropriate bucket [b]if[/b] possible\n[b]if[/b] [b]([/b]buckets[lb]bucket_index].remove[b]([/b]std::make_pair[b]([/b]hash, x[b])[/b][b])[/b][b])[/b] [b]{[/b]\n    // Decrement size [b]if[/b] removal was successful\n    size--;\n[b]}[/b]\n\n[b]return[/b];\n