keys,en,de
INS_BST,"if(root_ptr == nullptr){\n\troot_ptr = std::make_shared<TreeNode>(data);\n\treturn;\n}\n\nif(root_ptr->data > data){\n\tinsert(root_ptr->left_child_ptr, data);\n} else{\n\tinsert(root_ptr->right_child_ptr, data);\n}","if(root_ptr == nullptr){\n\troot_ptr = std::make_shared<TreeNode>(data);\n\treturn;\n}\n\nif(root_ptr->data > data){\n\tinsert(root_ptr->left_child_ptr, data);\n} else{\n\tinsert(root_ptr->right_child_ptr, data);\n}"
,,
INORDER,"Create empty sequence F, F_left, F_right\n\nif current_tree_node == null do\n\treturn F\n\nleft_sequence = inorder(left_child)\nright_sequence = inorder(right_child)\n\ninsert left_sequence behind sequence\nappend current_tree_node.data to sequence\ninsert right_sequence behind sequence\n\nreturn sequence\n","Create empty sequence F, F_left, F_right\n\nif current_tree_node == null do\n\treturn F\n\nleft_sequence = inorder(left_child)\nright_sequence = inorder(right_child)\n\ninsert left_sequence behind sequence\nappend current_tree_node.data to sequence\ninsert right_sequence behind sequence\n\nreturn sequence\n"
