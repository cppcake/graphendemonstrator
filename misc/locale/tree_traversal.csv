keys,en,de
INS_BST,"if(root_ptr == nullptr){\n\troot_ptr = std::make_shared<TreeNode>(data);\n\treturn;\n}\n\nif(root_ptr->data > data){\n\tinsert(root_ptr->left_child_ptr, data);\n} else{\n\tinsert(root_ptr->right_child_ptr, data);\n}","if(root_ptr == nullptr){\n\troot_ptr = std::make_shared<TreeNode>(data);\n\treturn;\n}\n\nif(root_ptr->data > data){\n\tinsert(root_ptr->left_child_ptr, data);\n} else{\n\tinsert(root_ptr->right_child_ptr, data);\n}"
,,
PREORDER,[b]if[/b] start_ptr == nullptr [b]do[/b]\n\t[b]return[/b]\n\nCreate empty sequence F\n\nappend start_ptr->data to sequence\ninsert inorder[b]([/b]start_ptr->left[b])[/b] behind F\ninsert inorder[b]([/b]start_ptr->right[b])[/b] behind F\n\n[b]return[/b] F\n,[b]if[/b] start_ptr == nullptr [b]do[/b]\n\t[b]return[/b]\n\nErstelle leere Folge F\n\nFüge start_ptr->data am Ende von F ein\nFüge inorder[b]([/b]start_ptr->left[b])[/b] h[b]int[/b]er F ein\nFüge inorder[b]([/b]start_ptr->right[b])[/b] h[b]int[/b]er F ein\n\n[b]return[/b] F\n
INORDER,[b]if[/b] start_ptr == nullptr [b]do[/b]\n\t[b]return[/b]\n\nCreate empty sequence F\n\ninsert inorder[b]([/b]start_ptr->left[b])[/b] behind F\nappend start_ptr->data to F\ninsert inorder[b]([/b]start_ptr->right[b])[/b] behind F\n\n[b]return[/b] F\n,[b]if[/b] start_ptr == nullptr [b]do[/b]\n\t[b]return[/b]\n\nErstelle leere Folge F\n\nFüge inorder[b]([/b]start_ptr->left[b])[/b] h[b]int[/b]er F ein\nFüge start_ptr->data am Ende von F ein\nFüge inorder[b]([/b]start_ptr->right[b])[/b] h[b]int[/b]er F ein\n\n[b]return[/b] F\n
POSTORDER,[b]if[/b] start_ptr == nullptr [b]do[/b]\n\t[b]return[/b]\n\nCreate empty sequence F\n\ninsert inorder[b]([/b]start_ptr->left[b])[/b] behind F\ninsert inorder[b]([/b]start_ptr->right[b])[/b] behind F\nappend start_ptr->data to sequence\n\n[b]return[/b] F\n,[b]if[/b] start_ptr == nullptr [b]do[/b]\n\t[b]return[/b]\n\nErstelle leere Folge F\n\nFüge inorder[b]([/b]start_ptr->left[b])[/b] h[b]int[/b]er F ein\nFüge inorder[b]([/b]start_ptr->right[b])[/b] h[b]int[/b]er F ein\nFüge start_ptr->data am Ende von F ein\n\n[b]return[/b] F\n
LEVELORDER,Create empty sequence F [b]and[/b] empty queue Q\nQ.push[b]([/b]start_ptr[b])[/b]\n\n[b]while[/b] Q is not empty [b]do[/b]\n\tLet current_ptr = Q.pop[b]([/b][b])[/b]\n\t[b]if[/b] current_ptr != nullptr then\n\t\tF.push[b]([/b]current_ptr->data[b])[/b]\n\t\tQ.push_back[b]([/b]current_ptr->left[b])[/b]\n\t\tQ.push_back[b]([/b]current_ptr->right[b])[/b]\n\n[b]return[/b] F\n,Erstelle leere Folge F und leere Warteschlange Q\nQ.push[b]([/b]start_ptr[b])[/b]\n\n[b]while[/b] Q nicht leer [b]do[/b]\n\tLet current_ptr = Q.pop[b]([/b][b])[/b]\n\t[b]if[/b] current_ptr != nullptr then\n\t\tF.push[b]([/b]current_ptr->data[b])[/b]\n\t\tQ.push_back[b]([/b]current_ptr->left[b])[/b]\n\t\tQ.push_back[b]([/b]current_ptr->right[b])[/b]\n\n[b]return[/b] F\n
